# allow any simpleContentStores.customStore.-prefixed property from system / global properties to be injected, even if not pre-defined here
subsystem.propertyName.patterns=^simpleContentStores\\.customStore\\..+$,^simpleContentStores\\.encryption\\.keystore\\..+\\.(location|type|provider|aliases|password(\\.location)?)$

# out-of-the-box we ship with a config that simulates the default unencrypted content store
simpleContentStores.rootStore=defaultTenantFileContentStore

simpleContentStores.customStores=defaultTenantFileContentStore

simpleContentStores.customStore.defaultTenantFileContentStore.type=defaultTenantFileStore
simpleContentStores.customStore.defaultTenantFileContentStore.value.rootDirectory=${dir.contentstore}
simpleContentStores.customStore.defaultTenantFileContentStore.value.protocol=store
simpleContentStores.customStore.defaultTenantFileContentStore.value.allowRandomAccess=false
simpleContentStores.customStore.defaultTenantFileContentStore.value.readOnly=false
simpleContentStores.customStore.defaultTenantFileContentStore.value.deleteEmptyDirs=true
simpleContentStores.customStore.defaultTenantFileContentStore.ref.contentLimitProvider=defaultContentLimitProvider
simpleContentStores.customStore.defaultTenantFileContentStore.ref.fileContentUrlProvider=defaultFileContentUrlProvider

simpleContentStores.encryption.validation.failMissingDatabaseKeys=true
simpleContentStores.encryption.validation.failMissingClusterKeys=true
simpleContentStores.encryption.validation.failMismatchedDatabaseKeys=true
simpleContentStores.encryption.validation.failMismatchedClusterKeys=true

simpleContentStores.encryption.defaultSymmetricKeyAlgorithm=AES
simpleContentStores.encryption.defaultSymmetricKeySize=128
simpleContentStores.encryption.keystoreIds=

simpleContentStores.encryption.reencryption.threadCount=4
simpleContentStores.encryption.reencryption.batchSize=50
simpleContentStores.encryption.reencryption.logInterval=1000