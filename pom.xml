<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 Copyright 2017 - 2022 Acosix GmbH

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>de.acosix.alfresco.maven</groupId>
        <artifactId>de.acosix.alfresco.maven.project.parent-6.1.2</artifactId>
        <version>1.5.0-SNAPSHOT</version>
    </parent>

    <groupId>de.acosix.alfresco.simplecontentstores</groupId>
    <artifactId>de.acosix.alfresco.simplecontentstores.repo</artifactId>
    <version>1.2.1</version>
    <packaging>jar</packaging>

    <name>Acosix Alfresco Simple Content Stores - Repository Module</name>
    <description>Addon to support simple configuration of flexible content stores</description>
    <url>https://github.com/Acosix/alfresco-simple-content-stores</url>

    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <scm>
        <connection>scm:git:git@github.com:Acosix/alfresco-simple-content-stores.git</connection>
        <developerConnection>scm:git:git@github.com:Acosix/alfresco-simple-content-stores.git</developerConnection>
        <url>git@github.com:Acosix/alfresco-simple-content-stores.git</url>
    </scm>

    <developers>
        <developer>
            <id>AFaust</id>
            <name>Axel Faust</name>
            <email>axel.faust@acosix.de</email>
            <organization>Acosix GmbH</organization>
            <roles>
                <role>Founder</role>
                <role>Architect</role>
                <role>Developer</role>
            </roles>
            <properties>
                <twitter>twitter.com/ReluctantBird83</twitter>
            </properties>
        </developer>
    </developers>

    <properties>
        <messages.path>acosix/simple-content-stores</messages.path>
        <messages.packageId>acosix.simple-content-stores</messages.packageId>
        <moduleId>acosix-simple-content-stores</moduleId>

        <acosix.utility.version>1.3.2</acosix.utility.version>
        <acosix.alfresco.client.version>0.2.0</acosix.alfresco.client.version>
        <!-- Not used yet  -->
        <!-- 
        <azure.version>8.3.0</azure.version>
         -->
        <ootbee.support-tools.version>1.2.1.0</ootbee.support-tools.version>

        <easymock.version>4.0.2</easymock.version>
        <lorem.version>2.1</lorem.version>

        <docker.tests.repositoryBaseImage>alfresco/alfresco-content-repository-community:7.2.0.1</docker.tests.repositoryBaseImage>
        <docker.tests.repositoryWebappPath>/usr/local/tomcat/webapps/alfresco</docker.tests.repositoryWebappPath>
        <!-- different debugger address for Java 11 -->
        <!-- need ACS keystore config -->
        <!-- do not require ActiveMQ instance for integration tests (requires projects to include the activemq-broker JAR via repository-it.xml) -->
        <docker.tests.repositoryGcJavaOpts>-Xms2g -Xmx2g -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+AlwaysPreTouch</docker.tests.repositoryGcJavaOpts>
        <docker.tests.repositoryVersionSpecificJavaOpts><![CDATA[-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:${docker.tests.repositoryDebugPort} -Dencryption.keystore.type=JCEKS -Dencryption.cipherAlgorithm=DESede/CBC/PKCS5Padding -Dencryption.keyAlgorithm=DESede -Dencryption.keystore.location=/usr/local/tomcat/shared/classes/alfresco/extension/keystore/keystore -Dmetadata-keystore.password=mp6yc0UD9e -Dmetadata-keystore.aliases=metadata -Dmetadata-keystore.metadata.password=oKIWzVdEdA -Dmetadata-keystore.metadata.algorithm=DESede -Dmessaging.broker.url=vm://localhost?broker.persistent=false]]></docker.tests.repositoryVersionSpecificJavaOpts>
        <docker.tests.repositoryTransformJavaOpts>-Dlocal.transform.service.enabled=false</docker.tests.repositoryTransformJavaOpts>
        <docker.tests.repositoryProjectJavaOpts>-DsimpleContentStores.encryption.keystore.scs-aesks.location=classpath:alfresco/extension/encryption-pkcs.keystore -DsimpleContentStores.encryption.keystore.scs-aesks.password.location=classpath:alfresco/extension/encryption-keystore-password -DsimpleContentStores.encryption.keystore.scs-aesks.type=PKCS12 -DsimpleContentStores.encryption.keystore.scs-aesks.aliases=effs-aes,effs-aes2 -DsimpleContentStores.encryption.keystore.scs-aesks.effs-aes.password=dockerTest -DsimpleContentStores.encryption.keystore.scs-aesks.effs-aes2.password=dockerTest -DsimpleContentStores.customStore.globalSiteRoutingStore.type=siteRoutingStore</docker.tests.repositoryProjectJavaOpts>
        <docker.tests.repositorySolrCommsJavaOpts>-Dsolr.secureComms=https</docker.tests.repositorySolrCommsJavaOpts>

        <docker.tests.repositoryImageBuilder.preRun>USER root</docker.tests.repositoryImageBuilder.preRun>
        <docker.tests.repositoryImageBuilder.postRun>USER alfresco</docker.tests.repositoryImageBuilder.postRun>
    </properties>

    <repositories>
        <repository>
            <id>ossrh</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>de.acosix.alfresco.utility</groupId>
                <artifactId>de.acosix.alfresco.utility.core.repo</artifactId>
                <version>${acosix.utility.version}</version>
                <scope>provided</scope>
            </dependency>

            <!-- Not used yet  -->
            <!--
            <dependency>
                <groupId>com.microsoft.azure</groupId>
                <artifactId>azure-storage</artifactId>
                <version>${azure.version}</version>
                <scope>compile</scope>
            </dependency>
            -->

            <dependency>
                <groupId>org.easymock</groupId>
                <artifactId>easymock</artifactId>
                <version>${easymock.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>com.thedeanda</groupId>
                <artifactId>lorem</artifactId>
                <version>${lorem.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>de.acosix.alfresco.utility</groupId>
                <artifactId>de.acosix.alfresco.utility.core.repo</artifactId>
                <version>${acosix.utility.version}</version>
                <classifier>installable</classifier>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>de.acosix.alfresco.rest.client</groupId>
                <artifactId>de.acosix.alfresco.rest.client</artifactId>
                <version>${acosix.alfresco.client.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>de.acosix.alfresco.rest.client</groupId>
                <artifactId>de.acosix.alfresco.rest.client</artifactId>
                <version>${acosix.alfresco.client.version}</version>
                <classifier>tests</classifier>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.orderofthebee.support-tools</groupId>
                <artifactId>support-tools-repo</artifactId>
                <version>${ootbee.support-tools.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- relevant to support vm: transport for non-AMQ-Docker setup -->
            <!-- transitive dependencies are already part of ACS -->
            <dependency>
                <groupId>org.apache.activemq</groupId>
                <artifactId>activemq-broker</artifactId>
                <version>${activemq.version}</version>
                <scope>test</scope>
                <exclusions>
                    <exclusion>
                        <groupId>*</groupId>
                        <artifactId>*</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.alfresco</groupId>
            <artifactId>alfresco-repository</artifactId>
            <exclusions>
                <!-- xmlfactory and cxf mess with resteasy / JAX-RS in integration tests -->
                <!-- opencmis exclusion excludes various transitive cxf inclusions -->
                <!-- none of these are needed for this specific addon -->
                <exclusion>
                    <groupId>org.alfresco</groupId>
                    <artifactId>alfresco-xmlfactory</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.chemistry.opencmis</groupId>
                    <artifactId>chemistry-opencmis-client-impl</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.chemistry.opencmis</groupId>
                    <artifactId>chemistry-opencmis-server-bindings</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.cxf</groupId>
                    <artifactId>cxf-rt-rs-client</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>de.acosix.alfresco.utility</groupId>
            <artifactId>de.acosix.alfresco.utility.core.repo</artifactId>
        </dependency>

        <dependency>
            <groupId>de.acosix.alfresco.utility</groupId>
            <artifactId>de.acosix.alfresco.utility.core.repo</artifactId>
            <classifier>installable</classifier>
        </dependency>

<!--
        <dependency>
            <groupId>com.microsoft.azure</groupId>
            <artifactId>azure-storage</artifactId>
        </dependency>
 -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>

        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
        </dependency>

        <dependency>
            <groupId>com.thedeanda</groupId>
            <artifactId>lorem</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-client</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jaxb-provider</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jackson2-provider</artifactId>
        </dependency>

        <dependency>
            <groupId>de.acosix.alfresco.rest.client</groupId>
            <artifactId>de.acosix.alfresco.rest.client</artifactId>
        </dependency>

        <dependency>
            <groupId>de.acosix.alfresco.rest.client</groupId>
            <artifactId>de.acosix.alfresco.rest.client</artifactId>
            <classifier>tests</classifier>
        </dependency>

        <dependency>
            <groupId>org.orderofthebee.support-tools</groupId>
            <artifactId>support-tools-repo</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>activemq-broker</artifactId>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>collect-test-dependencies-via-groupIds</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <includeScope>test</includeScope>
                                <outputDirectory>${project.build.directory}/collectedTestDependencies</outputDirectory>
                                <includeGroupIds>de.acosix.alfresco.utility,org.orderofthebee.support-tools</includeGroupIds>
                            </configuration>
                        </execution>
                        <execution>
                            <id>collect-test-dependencies-via-artifactIds</id>
                            <phase>pre-integration-test</phase>
                            <goals>
                                <goal>copy-dependencies</goal>
                            </goals>
                            <configuration>
                                <includeScope>test</includeScope>
                                <outputDirectory>${project.build.directory}/collectedTestDependencies</outputDirectory>
                                <includeArtifactIds>activemq-broker,time4j-core,time4j-i18n,cron-utils,javassist,javax.el</includeArtifactIds>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- some image customisations -->
                <!-- Maven + docker-maven-plugin result in somewhat weird inheritance handling -->
                <!-- (relying on positional order of images for overrides) -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <configuration>
                        <images>
                            <image>
                                <!-- no change to postgres image (first image in parent POM) -->
                            </image>
                            <image>
                                <!-- customise repository image (second image in parent POM) -->
                                <build>
                                    <!-- add Dockerfile to repository image for post-assembly customisation  -->
                                    <dockerFile>Repository-Dockerfile</dockerFile>
                                </build>
                                <run>
                                    <!-- add log directory mount to just the contentstore -->
                                    <!-- (cannot be done in parent POM due to hard requirement on specific project structure -->
                                    <!-- for tests to easily check contentstore files, we also mount alf_data locally, not in a volume -->
                                    <volumes>
                                        <bind>
                                            <volume>${project.build.directory}/docker/alf_data:/usr/local/tomcat/alf_data</volume>
                                            <volume>${project.build.directory}/docker/repository-logs:/usr/local/tomcat/logs</volume>
                                        </bind>
                                    </volumes>
                                    <env>
                                        <JAVA_OPTS><![CDATA[-Xms1g -Xmx1g -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:+UseStringDeduplication -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC -XX:+AlwaysPreTouch ${docker.tests.repositoryVersionSpecificJavaOpts} -Ddb.driver=org.postgresql.Driver -Ddb.username=alfresco -Ddb.password=alfresco -Ddb.url=jdbc:postgresql://postgres:5432/alfresco -Dsolr.host=search -Dsolr.port=${docker.tests.internalSearchPort} -Dsolr.secureComms=https -Dsolr.base.url=${docker.tests.searchBaseUrl} -Dindex.subsystem.name=${docker.tests.searchSubsystem} -Dcsrf.filter.enabled=false -Duser.language=en -DsimpleContentStores.encryption.keystore.scs-aesks.location=classpath:alfresco/extension/encryption-pkcs.keystore -DsimpleContentStores.encryption.keystore.scs-aesks.password.location=classpath:alfresco/extension/encryption-keystore-password -DsimpleContentStores.encryption.keystore.scs-aesks.type=PKCS12 -DsimpleContentStores.encryption.keystore.scs-aesks.aliases=effs-aes,effs-aes2 -DsimpleContentStores.encryption.keystore.scs-aesks.effs-aes.password=dockerTest -DsimpleContentStores.encryption.keystore.scs-aesks.effs-aes2.password=dockerTest -DsimpleContentStores.customStore.globalSiteRoutingStore.type=siteRoutingStore]]></JAVA_OPTS>
                                    </env>
                                </run>
                            </image>
                        </images>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>

            </plugins>
        </pluginManagement>

        <plugins>

            <!-- Docker use inherited from parent POM is optional - this enables it explicitly  -->
            <!-- old approach has become more unstable over time with unexplained Docker socket issues -->
            <!-- disabled for now in favor of developing a new approach --> 
            <!--
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
            </plugin>
            -->

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    
    <profiles>
        <profile>
            <id>composev1</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>exec-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>Build Docker containers</id>
                                    <phase>pre-integration-test</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>docker-compose</executable>
                                        <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                        <arguments>
                                            <argument>build</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Start Docker services</id>
                                    <phase>pre-integration-test</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>docker-compose</executable>
                                        <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                        <arguments>
                                            <argument>up</argument>
                                            <argument>-d</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Stop Docker services</id>
                                    <phase>post-integration-test</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>docker-compose</executable>
                                        <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                        <arguments>
                                            <argument>down</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>composev2</id>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>exec-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>Build Docker containers</id>
                                    <phase>pre-integration-test</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>docker</executable>
                                        <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                        <arguments>
                                            <argument>compose</argument>
                                            <argument>build</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Start Docker services</id>
                                    <phase>pre-integration-test</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>docker</executable>
                                        <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                        <arguments>
                                            <argument>compose</argument>
                                            <argument>up</argument>
                                            <argument>-d</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Stop Docker services</id>
                                    <phase>post-integration-test</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <executable>docker</executable>
                                        <workingDirectory>${project.build.directory}/docker</workingDirectory>
                                        <arguments>
                                            <argument>compose</argument>
                                            <argument>down</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>

        <profile>
            <id>purge</id>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>exec-maven-plugin</artifactId>
                            <executions>
                                <execution>
                                    <id>Stop any Docker containers if still active</id>
                                    <phase>clean</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <successCodes>
                                            <successCode>0</successCode>
                                            <successCode>1</successCode>
                                        </successCodes>
                                        <executable>docker</executable>
                                        <arguments>
                                            <argument>stop</argument>
                                            <argument>docker-repository-1</argument>
                                            <argument>docker-postgres-1</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Remove any Docker containers if still active</id>
                                    <phase>clean</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <successCodes>
                                            <successCode>0</successCode>
                                            <successCode>1</successCode>
                                        </successCodes>
                                        <executable>docker</executable>
                                        <arguments>
                                            <argument>rm</argument>
                                            <argument>-v</argument>
                                            <argument>docker-repository-1</argument>
                                            <argument>docker-postgres-1</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Remove Docker image(s)</id>
                                    <phase>clean</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <successCodes>
                                            <successCode>0</successCode>
                                            <successCode>1</successCode>
                                        </successCodes>
                                        <executable>docker</executable>
                                        <arguments>
                                            <argument>rmi</argument>
                                            <argument>${project.artifactId}-repository:test</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                                <execution>
                                    <id>Purge Docker volumes</id>
                                    <phase>clean</phase>
                                    <goals>
                                        <goal>exec</goal>
                                    </goals>
                                    <configuration>
                                        <successCodes>
                                            <successCode>0</successCode>
                                            <successCode>1</successCode>
                                        </successCodes>
                                        <executable>docker</executable>
                                        <arguments>
                                            <argument>volume</argument>
                                            <argument>rm</argument>
                                            <argument>docker_${project.artifactId}-db</argument>
                                            <argument>docker_${project.artifactId}-logs</argument>
                                            <argument>docker_${project.artifactId}-content</argument>
                                        </arguments>
                                    </configuration>
                                </execution>
                            </executions>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
    </profiles>
</project>